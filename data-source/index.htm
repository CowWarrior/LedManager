<!DOCTYPE html>
<html>
    <head>
        <title>Mini LED Server</title>
        <!-- Bootstrap Latest compiled and minified CSS -->
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
        <!-- Bootstrap Optional theme -->
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">
        <link rel="icon" type="image/x-icon" href="/favicon.ico">
        <!--Bootstrap Icons-->
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" integrity="sha384-4LISF5TTJX/fLmGSxO53rV4miRxdg84mZsxmO8Rx5jGtp/LbrixFETvWa5a6sESd" crossorigin="anonymous">
    </head>
    <body>
        <div class="jumbotron">
            <div class="container">
                <h1>Mini LED Server</h1>
                <p>Control your LEDstrip or array from here.</p>
            </div>
        </div>

        <div class="container">
            <!-- Example row of columns -->
            <div class="row">
              <div class="col-md-4">
                <h2>Effect</h2>
                <p>
                    Run a predefined effect:
                    <select id="cbxEffect">
                        <option value="default" selected>Default</option>
                        <option value="rainbow">Rainbow</option>
                        <option value="showcase">Showcase</option>
                        <option value="solid">Solid Color</option>
                        <option value="image">Image</option>
                        <option value="off">Off</option>
                    </select>
                    <input id="colSolid" type="color" />
                    <select id="cbxImageEffect"></select>
                </p>
                <p><a class="btn btn-primary" id="btnEffect" href="#" role="button">Set Effect</a></p>
              </div>
              <div class="col-md-4">
                <h2>Brightness</h2>
                <p>
                    Set brightness to : <span id="txtBrightness">64%</span>
                </p>
                <p>
                    <input type="range" min="0" max="100" value="64" class="slider" id="sldBrightness">
                </p>
                <p><a class="btn btn-default" id="btnBrightness" href="#" role="button">Set Brightness</a></p>
              </div>
              <div class="col-md-4">
                <h2>
                    Images 
                    <i class="bi bi-info-circle" title="<strong>Image specifications</strong>" data-toggle="popover" data-trigger="click" data-html="true" 
                    data-content="<i class='bi bi-crop'></i> Use 16x16 images, 16M colors.<br/><i class='bi bi-file-earmark'></i> Avoid .webp, they have issues."></i>
                </h2>
                <h3>Storage</h3>
                <p>
                    Used space: <progress id="proUsedSpace" value="50" max="100"></progress> <span id="txtUsedSpace">1.0</span>/<span id="txtTotalSpace">1.0</span> MB (<span id="txtPctUsedSpace">100%</span>) 
                </p>
                <h3>Upload</h3>
                <p>
                    Upload a new image (<span id='w'>0</span>x<span id='h'>0</span>)
                    <input type='file' id="btnBrowse" />
                </p>
                <p>
                    <canvas id="cvsImage" width="32" height="32" />                   
                </p>
                <p>
                    <input type="text" value="" id="txtImageName" minlength="3" maxlength="24" pattern="[a-zA-Z0-9_]+" />
                    <input type="button" value="Upload" class="btn btn-success" id="btnUploadImage" role="button" disabled />
                </p>
                <p>
                    <div id="txtInvalidImageName" class="alert alert-warning">The image name is invalid. It must contain only letters and numbers, and have from 3 to 24 characters.</div>
                    <div id="txtUploadSuccess" class="alert alert-success"><strong>Success!</strong> File successfully uploaded.</div>
                </p>
                <h3>Delete</h3>
                <p>
                    Delete an existing image
                    <select id="cbxImageDelete"></select>
                    <input type="button" value="Delete" class="btn btn-danger" id="btnDeleteImage" role="button" disabled />
                </p>
              </div>              
            </div>
            <hr>

            <footer>
                <p>Mini LED Server</p>
            </footer>
        </div> <!-- /container -->
        
        <!-- jQuery -->
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
        <!-- Bootstrap Latest compiled and minified JavaScript -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

        <!-- Page Script -->
        <script lang="JavaScript">
            //functions
            //read URL from selected file and load image
            function readURL(input) {
                if (input.files && input.files[0]) {
                    var reader = new FileReader();            
                    reader.onload = function (e) {
                        var img = new Image();
                        img.onload = function() {
                            getImageInfo(this);
                        }
                        img.src = e.target.result;
                        validateUploadForm();
                    }
                    reader.readAsDataURL(input.files[0]);
                    $("#txtImageName").val(input.files[0].name.replace(".", "_"));
                }
            }
            //get data from loaded image
            function getImageInfo(img) {
                var context = document.getElementById("cvsImage").getContext('2d');
                context.drawImage(img, 0, 0);
                $('#h').text(img.height);
                $('#w').text(img.width);
            }
            //get image list from server
            function getImageList() {
                var loc = "./images";
                $.ajax({
                    url: loc,
                    success : function(data) {              
                        var arrayList = data.FilesList;
                        
                        if (arrayList) {
                            //clear list
                            $("#cbxImageDelete").html("");
                            $("#cbxImageEffect").html("");
                            //add blank item first (for delete only)
                            $("#cbxImageDelete").append('<option value="" default></option>');
                            //add each item from the array
                            for (var i=0; i<arrayList.length; i++)
                            {
                                //add file to list
                                $("#cbxImageDelete").append('<option value="' + arrayList[i] + '">' + arrayList[i] + '</option>');
                                $("#cbxImageEffect").append('<option value="' + arrayList[i] + '">' + arrayList[i] + '</option>');
                            }
                        }
                        
                    }
                });
            }
            function uploadImage() {
                var context = document.getElementById("cvsImage").getContext('2d');
                //get image data is 0 based (0,0), but second pair is width and height (16,16), not end index (15,15)
                var bytesArray = new Uint8Array(context.getImageData(0, 0, 16, 16).data);
                var imageName = $("#txtImageName").val();
                var imageData = "";                    

                //encode raw data into HEX values
                for (i=0; i<bytesArray.length; i+=4)
                {
                    var r = bytesArray[i+0];
                    var g = bytesArray[i+1];
                    var b = bytesArray[i+2];
                    //we dont care about alpha depth
                    //var a = bytesArray[i+3];
                    imageData += toColor(r) + toColor(g) + toColor(b);
                }

                //stick values in query string
                var loc = "./image?imgname=" + imageName + "&imgdata=" + imageData.toUpperCase();

                $.ajax({
                    url: loc,
                    type: 'PUT',
                    processData: false,
                    success: function () { 
                        //clear forms
                        refreshForms();
                        //show success message
                        $("#txtUploadSuccess").fadeIn("fast", function() {
                            setTimeout(function () {$("#txtUploadSuccess").fadeOut("slow");}, 1500);
                        });
                        //update storage info
                        updateStorageInfo();
                    }
                });
            }
            //check if conditions are valid to upload an image
            function validateUploadForm() {
                //get pattern of the text control               
                var pattern = $("#txtImageName").attr('pattern');
                var exp = new RegExp('^' + pattern + '$');

                if (exp.test($("#txtImageName").val()) && $("#txtImageName").val().length > 2){
                    //text is valid, hide message
                    $("#txtInvalidImageName").hide();

                    if ($("#btnBrowse").val() != ""){
                        //all valid
                        $("#btnUploadImage").prop("disabled", false);
                    }
                    else
                    {
                        //no file selected
                        $("#btnUploadImage").prop("disabled", true);
                    }
                }
                else
                {
                    //text is not valid, show message, disable upload.
                    $("#btnUploadImage").prop("disabled", true);
                    //only show message if text is actually entered
                    if ($("#txtImageName").val().length > 0)
                        $("#txtInvalidImageName").show();
                    else
                        $("#txtInvalidImageName").hide();
                }
            }
            function refreshForms() {
                //update lists
                getImageList();
                //Clear upload text
                $("#txtImageName").val("");
                //Clear file selected
                $("#btnBrowse").val("");
                //Set default effect
                updateEffectsControls();
                //clear upload message
                $("#txtUploadSuccess").hide();
                //apply form validation to reset status of buttons
                validateUploadForm();
                //clear the canvas
                var canvas = document.getElementById("cvsImage");
                var context = canvas.getContext('2d');
                context.clearRect(0, 0, canvas.width, canvas.height);
            }
            function updateEffectsControls() {
                $("#colSolid").hide();
                $("#cbxImageEffect").hide();

                if ($("#cbxEffect").val() == "image")
                    $("#cbxImageEffect").show();
                else if ($("#cbxEffect").val() == "solid")
                    $("#colSolid").show();
            }
            function updateStorageInfo() {
                $.ajax({
                    url: "./storage",
                    success: function (data) { 
                        var used = data.UsedBytes / 1024 / 1024;
                        var total = data.TotalBytes / 1024 / 1024;
                        var pct = Math.round(used / total * 100);
                        if (pct < 1)
                            pct = 1;
                        else if (pct > 100)
                            pct = 100;

                        //show info
                        $("#proUsedSpace").val(pct);
                        $("#txtTotalSpace").text(total.toFixed(2));
                        $("#txtUsedSpace").text(used.toFixed(2));
                        $("#txtPctUsedSpace").text(pct + "%");
                    }
                });
            }
            function toColor(n) {
                if (n<16)
                    return "0" + n.toString(16);
                else
                    return n.toString(16);
            }
            //ready
            $(function() {
                //Send Effect command
                $("#btnEffect").on("click", function() {
                    var loc = "./effect";
                    var dat = {};

                    //choose which parameters to send
                    if ($("#cbxEffect").val() == "image")
                        dat = {name: $("#cbxEffect").val(), imgname: $("#cbxImageEffect").val()};
                    else if ($("#cbxEffect").val() == "solid")
                        dat = {name: $("#cbxEffect").val(), color: $("#colSolid").val().replace("#", "")};
                    else
                        dat = {name: $("#cbxEffect").val()};                    
                    
                     $.ajax({
                        url: loc,
                        data: dat
                    });
                });
                $("#cbxEffect").change(function (){
                    updateEffectsControls();
                });
                //Send brightness command
                $("#btnBrightness").on("click", function() {
                    var i = parseInt($("#sldBrightness").val());
                    var loc = "./effect";
                    var dat = {brightness: i.toString(16)};
                    $.ajax({
                        url: loc,
                        data: dat
                    });
                });
                //Brightness UI feedback
                $("#sldBrightness").on("input", function() {
                    var i = parseInt($("#sldBrightness").val());
                    //$("#txtBrightness").text(i.toString(16).toUpperCase());
                    //display in decimal instead with cap to 100 (%)
                    $("#txtBrightness").text(i.toString() + "%");
                });
                //File select button
                $("#btnBrowse").change(function(){
                    readURL(this);
                });
                //Image name
                $("#txtImageName").on("keyup", function(){
                    validateUploadForm();
                });
                //Send Image command
                $("#btnUploadImage").on("click", function() {
                    uploadImage();
                });
                //Image to be deleted selected
                $("#cbxImageDelete").change(function(){
                    if ($("#cbxImageDelete").val() == "")
                    {
                        $("#btnDeleteImage").prop("disabled", true);
                    }
                    else
                    {
                        $("#btnDeleteImage").prop("disabled", false);
                    }
                });
                //Delete image button
                $("#btnDeleteImage").on("click", function(){
                    //get image name from drop-down
                    var imageName = $("#cbxImageDelete").val(); 

                    //stick values in query string
                    var loc = "./image?imgname=" + imageName;

                    $.ajax({
                        url: loc,
                        type: 'DELETE',
                        processData: false,
                        success: function () { refreshForms(); updateStorageInfo(); }
                    });
                });
                
                //enable popover
                $('[data-toggle="popover"]').popover(); 

                //get form ready
                refreshForms();
                //get storage info
                updateStorageInfo();
            });
        </script>
    </body>
</html>